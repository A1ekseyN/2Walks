from adventure_data import adventure_data_table
from characteristics import char_characteristic
from colors import steps_color, energy_color
from datetime import datetime, timedelta
from drop import Drop_Item
from functions_02 import time
from skill_bonus import speed_skill_equipment_and_level_bonus
from colorama import Fore, Style
from settings import debug_mode
from bonus import apply_move_optimization_adventure
from inventory import Wear_Equipped_Items


class Adventure():
    # –ö–ª–∞—Å—Å –¥–ª—è Adventure (–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–π).
    def __init__(self, adventure_data_table):
        self.adventures = {
            '1': {'name': 'walk_easy', 'data': apply_move_optimization_adventure(adventure_data_table['walk_easy'])},
            '2': {'name': 'walk_normal', 'data': apply_move_optimization_adventure(adventure_data_table['walk_normal'])},
            '3': {'name': 'walk_hard', 'data': apply_move_optimization_adventure(adventure_data_table['walk_hard'])},
            '4': {'name': 'walk_15k', 'data': apply_move_optimization_adventure(adventure_data_table['walk_15k'])},
            '5': {'name': 'walk_20k', 'data': apply_move_optimization_adventure(adventure_data_table['walk_20k'])},
            '6': {'name': 'walk_25k', 'data': apply_move_optimization_adventure(adventure_data_table['walk_25k'])},
            '7': {'name': 'walk_30k', 'data': apply_move_optimization_adventure(adventure_data_table['walk_30k'])},
        }
        self.adventure_requirements = {}
        for key, adventure in self.adventures.items():
            self.adventure_requirements[key] = f'üèÉ: {steps_color(adventure["data"]["steps"])} —à–∞–≥–æ–≤, ' \
                                               f'üîã: {energy_color(adventure["data"]["energy"])} —ç–Ω–µ—Ä–≥–∏–∏, ' \
                                               f'üïë: {time(speed_skill_equipment_and_level_bonus(adventure["data"]["time"]))}'

    def adventure_check_done(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç–æ–µ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ - –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.
        if char_characteristic['adventure'] == True:
            if char_characteristic['adventure_end_timestamp'] <= datetime.now().timestamp():
                print('\nüó∫ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ. üó∫')

                # Drop function
                if char_characteristic['adventure_name'] == 'walk_easy':
                    Drop_Item.item_collect(self=None, hard='walk_easy')
                    char_characteristic['adventure_walk_easy_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_normal':
                    Drop_Item.item_collect(self=None, hard='walk_normal')
                    char_characteristic['adventure_walk_normal_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_hard':
                    Drop_Item.item_collect(self=None, hard='walk_hard')
                    char_characteristic['adventure_walk_hard_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_15k':
                    Drop_Item.item_collect(self=None, hard='walk_15k')
                    char_characteristic['adventure_walk_15k_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_20k':
                    Drop_Item.item_collect(self=None, hard='walk_20k')
                    char_characteristic['adventure_walk_20k_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_25k':
                    Drop_Item.item_collect(self=None, hard='walk_25k')
                    char_characteristic['adventure_walk_25k_counter'] += 1
                elif char_characteristic['adventure_name'] == 'walk_30k':
                    Drop_Item.item_collect(self=None, hard='walk_30k')
                    char_characteristic['adventure_walk_30k_counter'] += 1

                char_characteristic['adventure'] = False
                char_characteristic['adventure_name'] = None
                char_characteristic['adventure_end_timestamp'] = None

            elif char_characteristic['adventure_end_timestamp'] > datetime.now().timestamp():
                adv_end = datetime.fromtimestamp(char_characteristic["adventure_end_timestamp"]) - datetime.fromtimestamp(datetime.now().timestamp())
                adv_end = str(adv_end).split('.')[0]
                print(f'\tüó∫Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏: {char_characteristic["adventure_name"].title()}.')
                print(f'\tüïë –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {Fore.LIGHTBLUE_EX}{adv_end}{Style.RESET_ALL}')

    def adventure_menu(self):
        # –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.
        print('\n Ô∏èüó∫ Ô∏è--- –ú–µ–Ω—é –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è --- üó∫Ô∏è')
        print(f"Steps üèÉ: {char_characteristic['steps_can_use']}, "
              f"Energy üîã: {char_characteristic['energy']}, "
              f"Money üí∞: {char_characteristic['money']} $,")
        print('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.'
              '\n–í –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.')

        print('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: '
              f'\n\t1. –ü—Ä–æ–≥—É–ª–∫–∞ –≤–æ–∫—Ä—É–≥ –æ–∑–µ—Ä–∞: {self.adventure_requirements["1"]} - (–ù–∞–≥—Ä–∞–¥–∞: C-Grade (Ring, Necklace))')

        if char_characteristic['adventure_walk_easy_counter'] >= 3:
            print(f'\t2. –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ä–∞–π–æ–Ω—É:    {self.adventure_requirements["2"]} - (–ù–∞–≥—Ä–∞–¥–∞: C-Grade, B-Grade (Ring, Necklace))')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ - "–ü—Ä–æ–≥—É–ª–∫—É –≤–æ–∫—Ä—É–≥ –æ–∑–µ—Ä–∞": {3 - char_characteristic["adventure_walk_easy_counter"]} —Ä–∞–∑.')

        if char_characteristic['adventure_walk_normal_counter'] >= 3:
            print(f'\t3. –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ª–µ—Å:        {self.adventure_requirements["3"]} - (–ù–∞–≥—Ä–∞–¥–∞: C-Grade, B-Grade, A-Grade (Ring, Necklace))')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ - "–ü—Ä–æ–≥—É–ª–∫—É –ø–æ —Ä–∞–π–æ–Ω—É" –µ—â–µ: {3 - char_characteristic["adventure_walk_normal_counter"]} —Ä–∞–∑.')

        # –ü—É–Ω–∫—Ç 4 ‚Äì –Ω–æ–≤—ã–π: unlock –¥–ª—è walk_15k (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ 3 —Ä–∞–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è walk_hard)
        if char_characteristic.get('adventure_walk_hard_counter', 0) >= 3:
            print(f'\t4. –ü—Ä–æ–≥—É–ª–∫–∞ 15–∫ —à–∞–≥–æ–≤:    {self.adventure_requirements["4"]} - (Need to Test) (–ù–∞–≥—Ä–∞–¥–∞: B-Grade, A-Grade, S-Grade)')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ "–ü—Ä–æ–≥—É–ª–∫—É –≤ –ª–µ—Å" –µ—â–µ: {3 - char_characteristic.get("adventure_walk_hard_counter", 0)} —Ä–∞–∑.')

        if char_characteristic['adventure_walk_15k_counter'] >= 3:
            print(f'\t5. –ü—Ä–æ–≥—É–ª–∫–∞ 20–∫ —à–∞–≥–æ–≤:    {self.adventure_requirements["5"]} - (–ù–∞–≥—Ä–∞–¥–∞: A-Grade, S-Grade, S+Grade (Ring, Necklace))')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ 15–∫ –µ—â–µ: {3 - char_characteristic["adventure_walk_15k_counter"]} —Ä–∞–∑.')

        if char_characteristic['adventure_walk_20k_counter'] >= 3:
            print(f'\t6. –ü—Ä–æ–≥—É–ª–∫–∞ 25–∫ —à–∞–≥–æ–≤:    {self.adventure_requirements["6"]} - (–ù–∞–≥—Ä–∞–¥–∞: S-Grade, S+Grade (Ring, Necklace))')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ 20–∫ –µ—â–µ: {3 - char_characteristic["adventure_walk_20k_counter"]} —Ä–∞–∑.')

        if char_characteristic['adventure_walk_25k_counter'] >= 3:
            print(f'\t7. –ü—Ä–æ–≥—É–ª–∫–∞ 30–∫ —à–∞–≥–æ–≤:    {self.adventure_requirements["7"]} - (–ù–∞–≥—Ä–∞–¥–∞: S+Grade (Ring, Necklace))')
        else:
            print(f'\t- –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ 25–∫ –µ—â–µ: {3 - char_characteristic["adventure_walk_25k_counter"]} —Ä–∞–∑.')

        print('\t0. –í—ã—Ö–æ–¥')
        self.adventure_choice()

    def adventure_choice(self):
        # –í—ã–±–æ—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        try:
            ask = input('\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:\n>>> ')
            if ask in self.adventures:
                adv = self.adventures[ask]
                adv_name = adv['name']
                adv_data = adv['data']
                adv_req = self.adventure_requirements[ask]
                adv_steps = adv_data['steps']
                adv_energy = adv_data['energy']
                adv_time = speed_skill_equipment_and_level_bonus(adv_data['time'])
                self.adventure_choice_confirmation(adv_name, adv_req, adv_steps, adv_energy, adv_time)
            elif ask == '0':
                pass
            else:
                self.adventure_menu()
        except:
            self.adventure_menu()

    def adventure_choice_confirmation(self, adv_name, adv_req, adv_steps, adv_energy, adv_time):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. + –û–ø–∏—Å–∞–Ω–∏–µ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –¥—Ä–æ–ø —Å –Ω–µ–≥–æ.
        print(f'\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ: {adv_name}.'
              f'\n–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: {adv_req}'
              '\n\t1. –ü—Ä–æ–π—Ç–∏ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.'
              '\n\t0. –ù–∞–∑–∞–¥.')
        try:
            ask = input('\n>>> ')
            if ask == '1':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.
                if self.check_requirements(adv_name, adv_steps, adv_energy, adv_time):
                    pass
                else:
                    self.adventure_menu()
            elif ask == '0':
                self.adventure_menu()
            else:
                self.adventure_choice_confirmation(adv_name, adv_req, adv_steps, adv_energy, adv_time)
        except Exception as error:
            print(f'–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: {error}')
#            self.adventure_choice_confirmation(adv_name, adv_req, adv_steps, adv_energy, adv_time)

    def check_requirements(self, adv_name, adv_steps, adv_energy, adv_time):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.
        if char_characteristic['steps_can_use'] >= adv_steps and char_characteristic['energy'] >= adv_energy:
            print('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–∞.')
            self.start_adventure(adv_name, adv_steps, adv_energy, adv_time)

            # –ò–∑–Ω–æ—Å –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∏
            steps = adv_steps
            equipped_items_manager = Wear_Equipped_Items()
            equipped_items_manager.decrease_durability(steps)

            return True
        else:
            if char_characteristic['steps_can_use'] < adv_steps:
                print('\n- –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: üèÉ —à–∞–≥–æ–≤.')
            if char_characteristic['energy'] < adv_energy:
                print('- –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: üîã —ç–Ω–µ—Ä–≥–∏–∏.')
#            self.adventure_menu()
            return False

    def start_adventure(self, adv_name, adv_steps, adv_energy, adv_time):
        # –ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.
        print(f'\n–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: {adv_name}')
        char_characteristic['adventure'] = True
        char_characteristic['adventure_name'] = adv_name
        char_characteristic['adventure_start_timestamp'] = int(datetime.now().timestamp())
        char_characteristic['adventure_end_timestamp'] = int(datetime.now().timestamp()) + (adv_time * 60)
        char_characteristic['steps_today_used'] += adv_steps
        char_characteristic['steps_total_used'] += adv_steps
        char_characteristic['energy'] -= adv_energy

        print(f'Steps_used_today üèÉ: {char_characteristic["steps_today_used"]}')
        print(f'Energy used üîã: {adv_energy}')
        if debug_mode:
            print(f'Energy Left: {char_characteristic["energy"]}')
            print(f'–í—Ä–µ–º—è_now: {datetime.now().timestamp()}')
            print(f'–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: {char_characteristic["adventure_end_timestamp"] - datetime.now().timestamp()}')
        return char_characteristic
