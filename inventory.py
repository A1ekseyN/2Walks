from operator import itemgetter
from characteristics import char_characteristic


def inventory_menu():
    print('\n--- üéí –ú–µ–Ω—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è üéí ---'
          f'\n–í—Å–µ–≥–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ - {len(char_characteristic["inventory"])} –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ')
    inventory_view()

    ask = input('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è: '
                '\ns. Sold / –ü—Ä–æ–¥–∞—Ç—å'
                '\n0. –í—ã—Ö–æ–¥. '
                '\n>>> ')
    if ask == 's' or ask == '—ã' or ask == 'sold' or ask == '—ã—â–¥–≤':
        sold_item()
    elif ask == '0':
        pass
    else:
        inventory_menu()


def inventory_view():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    sorted_inventory = sorted(
        char_characteristic['inventory'],
        key=lambda x: (
            x.get('item_type', ''),
            x.get('characteristic', ''),
            -x.get('bonus', [0])[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        )
    )

    if sorted_inventory:
        for ind, item in enumerate(sorted_inventory, start=1):
            space = "" if ind >= 10 else " "
            if isinstance(item['quality'][0], float):
                item['quality'][0] = round(item['quality'][0], 2)

            print(f"\t{space}{ind}. {item['item_type'][0].title()} {item['grade'][0]}, "
                  f"+ {item['bonus'][0]} {item['characteristic'][0].title()}, "
                  f"(Quality: {item['quality'][0]}), "
                  f"(Price: {item['price'][0]} $) ")
    else:
        print(' - –ü—É—Å—Ç–æ')

    return sorted_inventory


def sold_item():
    print('\n--- –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ---')
    print(f'–í—Å–µ–≥–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {len(char_characteristic["inventory"])} –ø—Ä–µ–¥–º–µ—Ç–æ–≤.')
    char_characteristic["inventory"] = inventory_view()

    try:
        item_to_sold = int(input(f'\t0. –ù–∞–∑–∞–¥'
                                 f'\n\n–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(char_characteristic["inventory"])}). \n>>> '))
        if item_to_sold <= len(char_characteristic["inventory"]) and item_to_sold != 0:
            item_index = item_to_sold - 1  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É
            item = char_characteristic["inventory"][item_index]

            print(f'\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: '
                  f'\n\t- {item["item_type"][0].title()}, '
                  f'{item["grade"][0]}, '
                  f'+ {item["bonus"][0]} {item["characteristic"][0].title()}, '
                  f'(Quality: {item["quality"][0]}), '
                  f'(Price: {item["price"][0]} $) '
                  ### –¢—É—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞. 
                  f'\n\t- –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ üí∞: {item["price"][0]} $')
            try:
                ask = input('\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç? '
                            '\n1. –î–∞'
                            '\n0. –ù–∞–∑–∞–¥ \n>>> ')
                if ask == '1':
                    print(f'\n–í—ã –ø—Ä–æ–¥–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç:'
                          f'\n\t- {item["item_type"][0].title()}, '
                          f'{item["grade"][0]}, '
                          f'+ {item["bonus"][0]} {item["characteristic"][0].title()}, '
                          f'(Quality: {item["quality"][0]}), '
                          f'(Price: {item["price"][0]} $) '
                          ### –¢—É—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞. 
                          f'\n\t- –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ üí∞: {item["price"][0]} $')
                    try:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã —É –ø—Ä–µ–¥–º–µ—Ç–∞, —Ç–æ–≥–¥–∞ exception. –ò –ø—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –±–µ–∑ –ø—Ä–∏–±—ã–ª–∏.
                        char_characteristic['money'] += round(char_characteristic['inventory'][item_index]['price'][0])
                    except:
                        print('–£ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç —Ü–µ–Ω—ã. –ü—Ä–æ–¥–∞–∂–∞ –∑–∞ 0 $.')
                    del char_characteristic["inventory"][item_index]
                    inventory_menu()
                elif ask == '0':
                    sold_item()
                else:
                    sold_item()
            except:
                sold_item()
        elif item_to_sold == 0:
            inventory_menu()
        else:
            sold_item()
    except:
        sold_item()


class Wear_Equipped_Items:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∏–∑–Ω–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    equipped_items = {
        'equipment_head': char_characteristic['equipment_head'],
        'equipment_neck': char_characteristic['equipment_neck'],
        'equipment_torso': char_characteristic['equipment_torso'],
        'equipment_finger_01': char_characteristic['equipment_finger_01'],
        'equipment_finger_02': char_characteristic['equipment_finger_02'],
        'equipment_legs': char_characteristic['equipment_legs'],
        'equipment_foots': char_characteristic['equipment_foots'],
    }

    def __init__(self):
        self.max_durability = 10000000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å
        self.durability = self.max_durability  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å
        self.equipment_items = self.equipped_items
        self.neatness_factor = 1 - (char_characteristic['neatness_in_using_things'] / 100)

    def decrease_durability(self, steps):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ —Å —É—á—ë—Ç–æ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏."""
        adjusted_steps = steps * self.neatness_factor

        for key, item_info in self.equipment_items.items():
            if item_info is not None:
                initial_quality = item_info['quality'][0]
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–Ω–æ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                wear_without_skill = steps / self.max_durability * 100
                wear_with_skill = adjusted_steps / self.max_durability * 100

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å: –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤
                item_durability = self.durability * (initial_quality / 100)
                item_durability -= adjusted_steps
                if item_durability < 0:
                    item_durability = 0
                final_quality = (item_durability / self.max_durability) * 100
                self.equipment_items[key]['quality'][0] = final_quality

                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if key in char_characteristic and char_characteristic[key] is not None:
                    char_characteristic[key]['quality'][0] = final_quality

                # –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                self.view_wear_reduce_change(key, initial_quality, steps, adjusted_steps, final_quality, wear_without_skill, wear_with_skill)

        # –ü–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
        self.recalc_item_prices()

    def recalc_item_prices(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.
            –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –≥—Ä–µ–π–¥–∞ –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –≤–Ω–∏–∑.
            """
        for key, item_info in self.equipment_items.items():
            if item_info is not None:
                grade = item_info.get('grade', [None])[0]
                quality = item_info.get('quality', [None])[0]
                if grade is None or quality is None:
                    continue
                if grade == 'c-grade':
                    new_price = int(quality * 0.5)
                elif grade == 'b-grade':
                    new_price = int(quality * 1)
                elif grade == 'a-grade':
                    new_price = int(quality * 1.5)
                elif grade == 's-grade':
                    new_price = int(quality * 2)
                elif grade == 's+grade':
                    new_price = int(quality * 2.5)
                else:
                    new_price = item_info.get('price', [0])[0]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
                self.equipment_items[key]['price'][0] = new_price
                # –ï—Å–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ char_characteristic —Ç–∞–∫–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–Ω—É
                if key in char_characteristic and char_characteristic[key] is not None:
                    char_characteristic[key]['price'][0] = new_price

#                print(f"Updated price for {key}: {new_price}")

    def reduce_wear(self, steps):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏–∑–Ω–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –Ω–∞–≤—ã–∫–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏."""
        reduced_steps = steps * (1 - (char_characteristic['neatness_in_using_things'] / 100))
        self.decrease_durability(reduced_steps)

    def view_wear_reduce_change(self, item_name, initial_quality, steps, adjusted_steps, final_quality, wear_without_skill, wear_with_skill):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
        wear_reduction_percentage = ((steps - adjusted_steps) / steps) * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏–∑–Ω–æ—Å–∞
        saved_wear = wear_without_skill - wear_with_skill  # –≠–∫–æ–Ω–æ–º–∏—è –∏–∑–Ω–æ—Å–∞

        show_changes = False

        if show_changes:
            print(f"\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ '{item_name}':"
                  f"\n- –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {initial_quality:.6f} %"
                  f"\n- –®–∞–≥–æ–≤: {steps}"
                  f"\n- –®–∞–≥–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞–≤—ã–∫–∞: {adjusted_steps:.6f}"
                  f"\n- –ò–∑–Ω–æ—Å: {initial_quality - final_quality:.6f} %"
                  f"\n- –ö–æ–Ω–µ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {final_quality:.6f} %"
                  f"\n- –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–Ω–æ—Å–∞: {int(wear_reduction_percentage)} %"
                  f"\n- –≠–∫–æ–Ω–æ–º–∏—è –∏–∑–Ω–æ—Å–∞: {saved_wear:.6f} %")


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
#equipped_items_reduce_quality = Wear_Equipped_Items()

# –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 5000 —à–∞–≥–æ–≤ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
#equipped_items_reduce_quality.decrease_durability(steps=200)

# –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
#for key, item_info in equipped_items_reduce_quality.equipment_items.items():
#    if item_info is not None:
#        print(f"–ü—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ '{key}': {item_info['quality']:.2f}%")
