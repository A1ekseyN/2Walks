from datetime import datetime
import pickle
from api import steps_today_update
from settings import debug_mode

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–¥—Å—á—ë—Ç–µ timestamp_last_enter.
# –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
now_timestamp = datetime.now().timestamp()

######## Game Ballance ########
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–ª–∞–Ω—Å–∞ #
###############################

# –®–∞–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
steps_today = steps_today_update()


def load_characteristic():
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞
    global char_characteristic
    with open('characteristic.txt', 'rb') as f:
        char_characteristic = pickle.load(f)
        if debug_mode:
            print(f'–ß—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {char_characteristic}')
        return char_characteristic


def date_check_steps_today_used():
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É.
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ steps_today_used
    date_today_check = open('save.txt', 'r')
    last_enter_date = date_today_check.read()
    now_date = datetime.now().date()
    if str(now_date) != last_enter_date:
        if debug_mode:
            print('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: [steps_today_used] - 0.')
            return 0
        return 0
    elif str(now_date) == last_enter_date:
        return load_characteristic()['steps_today_used']


char_characteristic = {
    'date_last_enter': None,    # –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
    'timestamp_last_enter': now_timestamp,    # TimeStamp –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    'steps_today' : steps_today,                                        # Default: 0
    'steps_can_use': 0,                                                 # Default: 0
    'steps_today_used': date_check_steps_today_used(),                  # Default: 0
    'loc' : load_characteristic()['loc'],                               # Default: 'home'
    'energy' : load_characteristic()['energy'],                         # Default: 50
    'energy_max' : 50,                                                  # Default: 50
    'energy_time_stamp': load_characteristic()['energy_time_stamp'],    # Default: timestamp() (–í–æ–∑–º–æ–∂–Ω–æ)
    'money': load_characteristic()['money'],                            # Default: 50 $

    'skill_training': load_characteristic()['skill_training'],                          # Default: False
    'skill_training_name': load_characteristic()['skill_training_name'],                # Default: None
    'skill_training_timestamp': load_characteristic()['skill_training_timestamp'],      # Default: None
    'skill_training_time_end': load_characteristic()['skill_training_time_end'],        # Default: None

    'stamina' : load_characteristic()['stamina'],  # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: +1 % –∫ –æ–±—â–µ–º—É –∫–æ–ª-–≤—É –ø—Ä–æ–π–¥–µ–Ω—ã—Ö —à–∞–≥–æ–≤        # Default: 0
    'energy_max_skill': load_characteristic()['energy_max_skill'], # –ù–∞–≤—ã–∫ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –º–∞–∫—Å. —ç–Ω–µ—Ä–≥–∏–∏. (–ù—É–∂–µ–Ω –µ—â–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏.       # Default: 0
    'mechanics' : 0,
    'it_technologies' : 0,

    'work': load_characteristic()['work'],                              # Default: None
    'work_salary': load_characteristic()['work_salary'],                # Default: 0
    'working': load_characteristic()['working'],                        # Default: False (–í—Ä–æ–¥–µ)
    'working_hours': load_characteristic()['working_hours'],            # Default: 0
    'working_start': load_characteristic()['working_start'],
    'working_end': load_characteristic()['working_end'],
}

char_characteristic['energy_max'] = char_characteristic['energy_max'] + char_characteristic['energy_max_skill']

skill_training_table = {
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤.
    1: {
        'steps': 1000,
        'energy': 5,
        'money': 10,
        'time': 5,
    },
    2: {
        'steps': 2000,
        'energy': 10,
        'money': 20,
        'time': 15,
    },
    3: {
        'steps': 3000,
        'energy': 15,
        'money': 30,
        'time': 30,
    },
    4: {
        'steps': 4000,
        'energy': 20,
        'money': 40,
        'time': 60,
    },
    5: {
        'steps': 5000,
        'energy': 25,
        'money': 50,
        'time': 120,
    },
    6: {
        'steps': 6000,
        'energy': 30,
        'money': 100,
        'time': 240,
    },
    7: {
        'steps': 7000,
        'energy': 35,
        'money': 150,
        'time': 480,
    },
    8: {
        'steps': 8000,
        'energy': 40,
        'money': 200,
        'time': 720,
    },
    9: {
        'steps': 9000,
        'energy': 45,
        'money': 250,
        'time': 960,
    },
    10: {
        'steps': 10000,
        'energy': 50,
        'money': 300,
        'time': 1200,
    },
    11: {
        'steps': 11000,
        'energy': 55,
        'money': 500,
        'time': 1440,
    },
    12: {
        'steps': 12000,
        'energy': 60,
        'money': 750,
        'time': 1680,
    },
}


def save_characteristic():
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —Ñ–∞–π–ª
    if debug_mode:
        print(f'–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: {char_characteristic}')
    with open('characteristic.txt', 'wb') as f:
        pickle.dump(char_characteristic, f)
    print('\nüíæ Save Successfully.')


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
energy = 50                 # –ö–æ–ª-–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
energy_max = 50             # Max –∫–æ–ª-–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
#energy_time = time.time()   # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

stamina = 0                 # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
mechanics = 0               # –ú–µ—Ö–∞–Ω–∏–∫–∞
it_technologies = 0          # –ò–¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

# –ù–∞–≤—ã–∫–∏ —Ö–æ–¥—å–±—ã –ø–æ —Ä–∞–∑–Ω–æ–º—É —Ç–∏–ø—É –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
flat_walking = 0            # –•–æ–¥—å–±–∞ –ø–æ —Ä–æ–≤–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
up_walking = 0              # –•–æ–¥—å–±–∞ –≤–≤–µ—Ä—Ö
down_walking = 0            # –•–æ–¥—å–±–∞ –≤–Ω–∏–∑
mountain_walking = 0        # –•–æ–¥—å–±–∞ –ø–æ –≥–æ—Ä–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
terrain_walking = 0         # –•–æ–¥—å–±–∞ –ø–æ –∑–µ–º–ª–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
grass_walking = 0           # –•–æ–¥—å–±–∞ –ø–æ —Ç—Ä–∞–≤–µ
grass_high_walking = 0      # –•–æ–¥—å–±–∞ –ø–æ –≤—ã—Å–æ–∫–æ–π —Ç—Ä–∞–≤–µ
forest_walking = 0          # –•–æ–¥—å–±–∞ –ø–æ –ª–µ—Å—É
marshland_walking = 0       # –•–æ–¥—å–±–∞ –ø–æ –±–æ–ª–æ—Ç–∏—Å—Ç–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
snow_walking = 0            # –•–æ–¥—å–±–∞ –ø–æ —Å–Ω–µ–≥—É
ice_walking = 0             # –•–æ–¥—å–±–∞ –ø–æ –ª—å–¥—É
sand_walking = 0            # –•–æ–¥—å–±–∞ –ø–æ –ø–µ—Å–∫—É
stone_walking = 0           # –•–æ–¥—å–±–∞ –ø–æ –∫–∞–º–Ω—è–º
# –ù–∞–≤—ã–∫ –ª–∞–∑–∏—Ç—å –ø–æ –≥–æ—Ä–∞–º –∏ –∫–∞–º–Ω—è–º (–ù—É–∂–µ–Ω –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–π–æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏)

# –°–æ–ø—Ä–æ—Ç–µ–≤–ª—è–µ–º–æ—Å—Ç—å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º —è–≤–ª–µ–Ω–∏—è–º
resistance_cold = 0         # –°–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å —Ö–æ–ª–æ–¥—É
resistance_heat = 0         # –°–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å —Ç–µ–ø–ª—É
